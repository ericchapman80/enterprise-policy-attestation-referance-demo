name: CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  id-token: write
  attestations: write
  packages: write
  contents: read

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/frontend-app
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/frontend-app/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Verify minimum coverage
      run: |
        COVERAGE=$(cat ./coverage/coverage-summary.json | jq -r '.total.lines.pct')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage below threshold: $COVERAGE%"
          exit 1
        else
          echo "Coverage meets threshold: $COVERAGE%"
        fi
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: ./frontend/frontend-app/coverage

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/backend-api
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: poetry install
    
    - name: Run tests with coverage
      run: poetry run pytest --cov=app --cov-report=xml --cov-report=term
    
    - name: Verify minimum coverage
      run: |
        COVERAGE=$(poetry run coverage report | tail -1 | awk '{print $NF}' | sed 's/%//')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage below threshold: $COVERAGE%"
          exit 1
        else
          echo "Coverage meets threshold: $COVERAGE%"
        fi
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: ./backend/backend-api/coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      with:
        args: --all-projects --severity-threshold=critical
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    - name: Run Snyk container scan
      uses: snyk/actions/docker@master
      with:
        image: frontend:latest
        args: --severity-threshold=critical
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  functional-tests:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies for frontend
        run: |
          cd frontend/frontend-app
          npm ci
          
      - name: Install dependencies for backend
        run: |
          cd backend/backend-api
          pip install poetry
          poetry install
          
      - name: Start backend service
        run: |
          cd backend/backend-api
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 5
          
      - name: Build and start frontend
        run: |
          cd frontend/frontend-app
          npm run build
          npm run preview &
          sleep 5
          
      - name: Install Playwright
        run: |
          cd e2e-tests
          npm ci
          npx playwright install --with-deps chromium
          
      - name: Run Playwright tests
        run: |
          cd e2e-tests
          SKIP_WEB_SERVER=true npm test
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e-tests/playwright-report/
          
      - name: Upload test screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: e2e-tests/tests/screenshots/

  build-provenance:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, functional-tests]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Build frontend image
      id: build-frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend/frontend-app
        push: false
        tags: frontend:latest
        outputs: type=docker,dest=/tmp/frontend.tar
        provenance: true
        sbom: true
    
    - name: Build backend image
      id: build-backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend/backend-api
        push: false
        tags: backend:latest
        outputs: type=docker,dest=/tmp/backend.tar
        provenance: true
        sbom: true
    
    - name: Generate attestation for frontend
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: /tmp/frontend.tar
    
    - name: Generate attestation for backend
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: /tmp/backend.tar
    
    - name: Validate build provenance from trusted internal source
      run: |
        # Example of validating build provenance from trusted internal source
        # In a real implementation, this would validate against your organization's trusted registry
        echo "Validating build provenance from trusted internal source"
        
        # Verify that the build was performed by GitHub Actions
        TRUSTED_BUILDER="https://github.com/actions/runner"
        if [[ "$GITHUB_SERVER_URL" == "$TRUSTED_BUILDER"* ]]; then
          echo "Build provenance validated successfully - from trusted internal source"
        else
          echo "Build provenance validation failed - not from trusted internal source"
          exit 1
        fi
    
    - name: Upload attestations and artifacts
      uses: actions/upload-artifact@v4
      with:
        name: attestations
        path: |
          sbom.spdx.json
          /tmp/frontend.tar.att
          /tmp/backend.tar.att
